{% import "macros" as macros %}
<!DOCTYPE html>
<html>
    <head>
    <title id="title">DataRegi</title>
    {% include "header" %}
    </head>
<body>

    {% include "page_header" %}
    
    <div class="hero fullscreen">
        <div class="hero-body u-center">
            <div class="w-90" style="position: relative" id="tableRoot">
                <div class="row">
                    <div class="col-9">
                        <h3 id="doc_header" style="display: inline;"></h3>
                        <span id="doc_download">
                        </span>
                        <span id="doc_delete" style="text-align: end;">
                        </span>
                    </div>

                </div>
                <div class="row">
                    <div class="col-3">
                       Upload date
                    </div>
                    <div class="col-9" id="doc_timestamp">
                    </div>
                </div>
                <div class="row">
                    <div class="col-3">
                       Size
                    </div>
                    <div class="col-9" id="doc_size">
                    </div>
                </div>
                <div class="row" id="orgRow" style="display: none;">
                    <div class="col-3">
                       Organization
                    </div>
                    <div class="col-9" id="orgName">
                    </div>
                </div>
                <div class="row">
                    <div class="col-12">
                        <em id="ownershipStatus"></em>
                    </div>
                </div>
                <div class="row">
                    <div class="col-6">
                        <div>
                            <div class="row" id="docHeaderRow_version_list">
                                <div class="col-12">
                                    <h6 id="docCountHeader"></h6>
                                </div>
                            </div>
                            <div class="row">
                                <div class="col-12">
                                   {{ macros::pagination(label="version_list") }}
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="col-6">
                        <div>
                            <div class="row">
                                <div class="col-9">
                                    <h6 id="accessCountHeader"></h6>
                                </div>
                                <div class="col-3">
                                    <span style="text-align: end;">
                                        <a href="javascript:showSharing()"><i id="sharing_button" class="fas fa-wrapper fa-plus" title="Add an email address to share with"></i></a>
                                    </span>
                                </div>
                            </div>
                            <div class="row" id="docHeaderRow_access_list">
                                <div class="col-9" style="display:none">
                                   <input id="add_sharing" type="text" placeholder="Add an email address to share with">
                                </div>
                                <div class="col-3" style="display:none">
                                   <button class="form-group-btn btn-link" onclick="addSharing()">Add</button>
                                </div>
                            </div>
                            <div class="row">
                                <div class="col-12">
                                   {{ macros::pagination(label="access_list") }}
                                </div>
                            </div>
                        </div>
                    </div>
                  
                </div>
               
            </div>
        </div>
    </div>

    <div class="modal modal-animated--zoom-in" id="delete-modal">
        <a href="#doc_delete" class="modal-overlay close-btn" aria-label="Close"></a>
        <div class="modal-content" role="document">
            <div class="modal-header">
                <a href="#doc_delete" class="u-pull-right" aria-label="Close">
                    <span class="icon">
                        <i class="fa-wrapper fa fa-times"></i>
                    </span>
                </a>
                <div class="modal-title">Confirm document deletion</div>
            </div>
            <div class="modal-body">
                <div id="delete_modal_text">
                    
                </div>
            </div>
            <div class="modal-footer">
                <div class="form-section u-text-right">
                    <a href="#doc_delete">
                        <button class="btn btn-small u-inline-block">Cancel</button>
                    </a>
                    <a href="#doc_delete">
                        <button class="btn-info btn-small u-inline-block" onclick="deleteDoc()" >Confirm</button>
                    </a>
                </div>
            </div>
        </div>
    </div>

    <div class="modal modal-animated--zoom-in" id="unshare-modal">
        <a href="#doc_unshare" class="modal-overlay close-btn" aria-label="Close"></a>
        <div class="modal-content" role="document">
            <div class="modal-header">
                <a href="#doc_unshare" class="u-pull-right" aria-label="Close">
                    <span class="icon">
                        <i class="fa-wrapper fa fa-times"></i>
                    </span>
                </a>
                <div class="modal-title">Confirm sharing deletion</div>
            </div>
            <div class="modal-body">
                <div id="unshare_modal_text">
                    
                </div>
            </div>
            <div class="modal-footer">
                <div class="form-section u-text-right">
                    <a href="#doc_unshare">
                        <button class="btn btn-small u-inline-block">Cancel</button>
                    </a>
                    <a href="#doc_unshare">
                        <button class="btn-info btn-small u-inline-block" id="unshare_confirm" >Confirm</button>
                    </a>
                </div>
            </div>
        </div>
    </div>

    {% include "list" %}
    {% include "script" %}
    <script>
        const doc_id='{{ doc_id }}';
        const user_id='{{ user_id }}';
        let doc_name='';
        let is_owner=false;

        async function loadDoc(id){
            if (id){
                const query="/api/docs/"+encodeURIComponent(id)+"/info";
                const response = await fetch(query, {
                    method: 'GET'
                })
                if (!response.ok){
                    showError(await response.text());
                } else {
                    const docInfo=await response.json();
                    doc_name=docInfo['name'];
                    document.getElementById("title").textContent='DataRegi - '+docInfo['name'];
                    document.getElementById("doc_header").textContent=docInfo['name'];
                    const docDate=new Date(docInfo['created']);
                    document.getElementById("doc_timestamp").textContent=docDate.toLocaleString();
                    document.getElementById("doc_size").textContent=humanFileSize(docInfo['size']);

                    const download=document.getElementById("doc_download");
                    const a=document.createElement("a");
                    a.href="/api/docs/"+encodeURIComponent(id)+"/data";
                    a.download=docInfo['name'];
                    const i=document.createElement("i");
                    i.className="fas fa-download fa-wrapper fa-2x";
                    i.title="Download "+docInfo['name'];
                    a.appendChild(i);
                    download.appendChild(a);
                    
                    const delspan=document.getElementById("doc_delete");
                    const del = document.createElement("a");
                    del.href="#delete-modal";
                    const deli=document.createElement("i");
                    deli.className="fas fa-trash fa-wrapper";
                    deli.title="Delete "+docInfo['name'];
                    del.appendChild(deli);
                    delspan.appendChild(del);

                    document.getElementById("delete_modal_text").innerText="Are you sure you want to delete "+docInfo['name']+"?";

                    is_owner=docInfo['owner']==user_id;
                    let ownerStatus="This document has been shared to you";
                    if (is_owner){
                        ownerStatus="You are the owner of this document";
                    } 
                    document.getElementById('ownershipStatus').innerText=ownerStatus;

                    if (docInfo['org_id']){
                        await showOrg(docInfo['org_id']);
                    }

                    let pagination=new Pagination('version_list','/api/docs/count',{'owner':false,'distinct':false,'name':docInfo['name'],'except':id,'queryDate':docDate});
                    pagination.onCount=showDocCount;
                    resetDocList(pagination,false);

                    showAccesses();
                }
                
               
            } else {
                showError("No document ID provided");
            }
        }

        async function showOrg(org_id){
            const query="/api/orgs/"+encodeURIComponent(org_id);
            const response = await fetch(query, {
                method: 'GET'
            })
            if (!response.ok){
                showError(await response.text());
            } else {
                const orgInfo=await response.json();
                const orgName=orgInfo['name'];

                document.getElementById('orgName').innerText=orgName;
                document.getElementById('orgRow').style.display='flex';
               
                showMembers();

            }
        }

        async function loadAccessList(label, offset){
            let pagination=paginationsByLabel[label];
            let queryOptions=pagination['queryOptions'];
            let queryObj=Object.assign({'limit':pagination.pageSize,'offset':offset},queryOptions);
                    
            if (pagination.searchText && pagination.searchText.length>0){
                queryObj['name']='*'+pagination.searchText+'*';
                needAmp=true;
            } 
            let uuid=queryObj['id'];
            delete queryObj['id'];
            let query='/api/accesses/'+uuid+'?'+Object.keys(queryObj).map(key => key + '=' + encodeURIComponent(queryObj[key])).join('&');
    
            const response = await fetch(query, {
                    method: 'GET'
                });
            return response.json().then(data=>{
                let docHeaderRow=document.getElementById("docHeaderRow_"+label);
                docHeaderRow.parentNode.querySelectorAll(".docLine").forEach(el => el.remove());
                
                for (const docInfo of data){
                    let docLine=document.createElement("div");
                    docLine.className="row docLine";
                    let docItem=document.createElement("div");
                    docItem.className="col-9";
                    docItem.appendChild(document.createTextNode(docInfo['name']));
                    docLine.appendChild(docItem);
                    let details=document.createElement("div");
                    details.className="col-3";
                    details.style.textAlign="right";
                    docLine.appendChild(details);
                    if (is_owner){
                        const del = document.createElement("a");
                        del.href="#unshare-modal";
                        const deli=document.createElement("i");
                        deli.className="fas fa-trash fa-wrapper";
                        deli.title="Remove sharing with "+docInfo['name'];
                        del.appendChild(deli);
                        details.appendChild(del);
                        document.getElementById("unshare_confirm").onclick=function(){removeSharing(docInfo['id']);};
                        document.getElementById("unshare_modal_text").innerText="Are you sure you want to remove sharing with "+docInfo['name']+"?";
                    }
                    //tableRoot.appendChild(docLine);
                    docHeaderRow.parentNode.insertBefore(docLine, docHeaderRow.nextSibling);
                    docHeaderRow=docLine;
                }
            });
        }

        async function deleteDoc(){
            const query="/api/docs/"+encodeURIComponent(doc_id);
            const response = await fetch(query, {
                method: 'DELETE'
            })
            if (!response.ok){
                showError(await response.text());
            } else {
                document.cookie="deleted="+doc_name+"; Secure";
                document.location="/";
            }
        }

        function showSharing(){
            for (div of document.getElementById('docHeaderRow_access_list').getElementsByTagName("div")){
                div.style.display='flex';
            }
            const sharingButton=document.getElementById("sharing_button");
            sharingButton.className="fas fa-wrapper fa-minus";
            sharingButton.parentElement.href="javascript:hideSharing()";
        }

        function hideSharing(){
            for (div of document.getElementById('docHeaderRow_access_list').getElementsByTagName("div")){
                div.style.display='none';
            }
            const sharingButton=document.getElementById("sharing_button");
            sharingButton.className="fas fa-wrapper fa-plus";
            sharingButton.parentElement.href="javascript:showSharing()";
        }


        function showAccesses(){
            let paginationAccess=new Pagination('access_list','/api/accesses/'+encodeURIComponent(doc_id)+'/count',{'id':doc_id});
            paginationAccess.onCount=showAccessCount;
            paginationAccess.loadList=loadAccessList;
            resetDocList(paginationAccess,false);
        }

        async function addSharing(){
            const email=document.getElementById('add_sharing').value;
            if (email){
                const query="/api/accesses/"+encodeURIComponent(doc_id)+"/"+encodeURIComponent(email);
                const response = await fetch(query, {
                    method: 'POST'
                })
                if (!response.ok){
                    showError(await response.text());
                } else {
                    showAccesses();
                }
            }
        }

        async function removeSharing(user_id){
            const query="/api/accesses/"+encodeURIComponent(doc_id)+"/"+encodeURIComponent(user_id);
            const response = await fetch(query, {
                method: 'DELETE'
            })
            if (!response.ok){
                showError(await response.text());
            } else {
                showAccesses();
            }
        }

     
        function showDocCount(pagination){
            let txt="No other versions";
            if (pagination.count==1){
                txt="1 other version";
            } else if (pagination.count>1){
                txt="There are " +pagination.count.toString()+" other versions";
            }
         
            document.getElementById('docCountHeader').textContent=txt;
        }

        function showAccessCount(pagination){
            let txt="Not shared with anybody";
            if (pagination.count==1){
                txt="Shared with one other";
            } else if (pagination.count>1){
                txt="Shared with " +pagination.count.toString()+" others";
            }
         
            document.getElementById('accessCountHeader').textContent=txt;
        }

        loadDoc(doc_id);
        
        /**
        * https://stackoverflow.com/a/14919494/827593
        * Format bytes as human-readable text.
        * 
        * @param bytes Number of bytes.
        * @param si True to use metric (SI) units, aka powers of 1000. False to use 
        *           binary (IEC), aka powers of 1024.
        * @param dp Number of decimal places to display.
        * 
        * @return Formatted string.
        */
        function humanFileSize(bytes, si=false, dp=1) {
            const thresh = si ? 1000 : 1024;
        
            if (Math.abs(bytes) < thresh) {
            return bytes + ' B';
            }
        
            const units = si 
            ? ['kB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'] 
            : ['KiB', 'MiB', 'GiB', 'TiB', 'PiB', 'EiB', 'ZiB', 'YiB'];
            let u = -1;
            const r = 10**dp;
        
            do {
            bytes /= thresh;
            ++u;
            } while (Math.round(Math.abs(bytes) * r) / r >= thresh && u < units.length - 1);
        
        
            return bytes.toFixed(dp) + ' ' + units[u];
        }

    </script>

</body>
</html>
