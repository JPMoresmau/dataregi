
<script>
    /*const pageSize=10;
    let currentPage=0; 
    let docCount = 0;
    
    let timeout = null;
    const searchDocs=document.getElementById("searchDocs");
    let search=searchDocs!=null?searchDocs.value:'';*/

    class Pagination {
        label;
        searchField = null;
        searchText = '';
        pageSize = 3;
        currentPage = 0;
        count = 0;
        timeout = null;
        countQuery;
        queryOptions;
        onCount=function(_pagination){};
        loadList=loadList;

        constructor(label, countQuery, queryOptions){
            this.label=label;
            this.countQuery=countQuery;
            this.searchField=document.getElementById("searchDocs_"+label);
            if (this.searchField!=null){
                this.searchText=this.searchField.value;
            }
            this.queryOptions=queryOptions;
        }
    }

    let paginationsByLabel={};

    async function loadCount(pagination){
        let query=pagination.countQuery;
        let queryObj=Object.assign({},pagination.queryOptions);
      
        if (pagination.searchText && pagination.searchText.length>0){
            queryObj['name']='*'+pagination.searchText+'*';
        } 
        
        var queryString = Object.keys(queryObj).map(key => key + '=' + encodeURIComponent(queryObj[key])).join('&');
        if (queryString){
            query+='?'+queryString;
        }

        const response = await fetch(query, {
            method: 'GET'
        });
        return response.json();
    }

    async function loadList(label, offset){
        let pagination=paginationsByLabel[label];
        let queryOptions=pagination['queryOptions'];
        let queryObj=Object.assign({'limit':pagination.pageSize,'offset':offset},queryOptions);
                
        if (pagination.searchText && pagination.searchText.length>0){
            queryObj['name']='*'+pagination.searchText+'*';
            needAmp=true;
        } 
       
        let query='/api/docs?'+Object.keys(queryObj).map(key => key + '=' + encodeURIComponent(queryObj[key])).join('&');

        const response = await fetch(query, {
                method: 'GET'
            });
        return response.json().then(data=>{
            document.querySelectorAll(".docLine").forEach(el => el.remove());
            let docHeaderRow=document.getElementById("docHeaderRow_"+label);
            
            for (const docInfo of data){
                let docLine=document.createElement("div");
                docLine.className="row docLine";
                let docItem=document.createElement("div");
                docItem.className="col-9";
                const docDate=new Date(docInfo['created'])

                let a=document.createElement("a");
                if (queryOptions["queryDate"]){
                    const queryDate=new Date(queryOptions["queryDate"]);
                    if (docDate>queryDate){
                        let i=document.createElement("i");
                        i.className="fas fa-calendar fa-wrapper";
                        i.title="Newer version";
                        a.appendChild(i);
                    }
                }
                a.appendChild(document.createTextNode(docInfo['name']));

                a.href="document?id="+encodeURIComponent(docInfo['id']);
                docItem.appendChild(a);
                docLine.appendChild(docItem);
                let details=document.createElement("div");
                details.className="col-3";
                details.style.textAlign="right";
                details.textContent=docDate.toLocaleString();
                docLine.appendChild(details);
                //tableRoot.appendChild(docLine);
                docHeaderRow.parentNode.insertBefore(docLine, docHeaderRow.nextSibling);
                docHeaderRow=docLine;
            }
        });
    }

    function updatePagination(label, page){
        let pagination=paginationsByLabel[label];
        const currentPage=page;
        pagination.currentPage=page;
        //console.log("label",label,"currentPage",pagination.currentPage,"docCount",pagination.count,"pageSize",pagination.pageSize);
        const prev=document.getElementById("previousDocPage_"+label);
        const prevA=prev.getElementsByTagName("a")[0];
        if (currentPage>0){
            prev.classList.remove("disabled");
            prevA.classList.remove("disabled");
        } else {
            prev.classList.add("disabled");
            prevA.classList.add("disabled");
        }
        const next=document.getElementById("nextDocPage_"+label);
        const nextA=next.getElementsByTagName("a")[0];
        const lastPage=Math.ceil(pagination.count/pagination.pageSize)-1;
        if (currentPage<lastPage){
            next.classList.remove("disabled");
            nextA.classList.remove("disabled");
        } else {
            next.classList.add("disabled");
            nextA.classList.add("disabled");
        }
        
        const curr=document.getElementById("currentDocPage_"+label);
        curr.innerText=(currentPage+1).toString();

        document.querySelectorAll(".otherDocPage").forEach(el => el.remove());
        if (currentPage>0){
            const prevIndexedPage=document.createElement("div");
            prevIndexedPage.className="pagination-item short otherDocPage";
            const prevIndexedPageA=document.createElement("a");
            prevIndexedPageA.href="javascript:goToDocPage('"+label+"',0)";
            prevIndexedPageA.innerText="1";
            prevIndexedPage.appendChild(prevIndexedPageA);
            prev.parentNode.insertBefore(prevIndexedPage,prev.nextSibling);
            if (currentPage>1){
                const ellIndexedPage=document.createElement("div");
                ellIndexedPage.className="pagination-item short otherDocPage disabled";
                const ellIndexedPageA=document.createElement("a");
                ellIndexedPageA.className="disabled";
                ellIndexedPage.appendChild(ellIndexedPageA);
                ellIndexedPageA.href="#!";
                ellIndexedPageA.innerText="...";
                prev.parentNode.insertBefore(ellIndexedPage,prevIndexedPage.nextSibling);
            }
        }
        if (currentPage<lastPage){
            const nextIndexedPage=document.createElement("div");
            nextIndexedPage.className="pagination-item short otherDocPage";
            const nextIndexedPageA=document.createElement("a");
            nextIndexedPageA.href="javascript:goToDocPage('"+label+"',"+lastPage+")";
            nextIndexedPageA.innerText=(lastPage+1).toString();
            nextIndexedPage.appendChild(nextIndexedPageA);
            next.parentNode.insertBefore(nextIndexedPage,next);
            if (currentPage<lastPage-1){
                const ellIndexedPage=document.createElement("div");
                ellIndexedPage.className="pagination-item short otherDocPage disabled";
                const ellIndexedPageA=document.createElement("a");
                ellIndexedPageA.className="disabled";
                ellIndexedPage.appendChild(ellIndexedPageA);
                ellIndexedPageA.href="#!";
                ellIndexedPageA.innerText="...";
                next.parentNode.insertBefore(ellIndexedPage,nextIndexedPage);
            }
        }
    }

    

    function goToDocPage(label, page){
        let pagination=paginationsByLabel[label];
        pagination.loadList(label, page*pagination.pageSize).then(updatePagination(label,page));
    }


    function previousDocPage(label){
        let currentPage=paginationsByLabel[label].currentPage;
        if (currentPage>0){
            goToDocPage(label, currentPage-1);
        }
    }

    function nextDocPage(label){
        let pagination=paginationsByLabel[label];
        let currentPage=pagination.currentPage;
        if (currentPage<Math.ceil(pagination.count/pagination.pageSize)){
            goToDocPage(label,currentPage+1);
        }
    }

    async function resetDocList(pagination,addListener=true){
        paginationsByLabel[pagination.label]=pagination;
        
        if (pagination.searchField!=null && addListener){
            pagination.searchField.addEventListener("input", function(e){
                clearTimeout(pagination.timeout);
                pagination.timeout = setTimeout(function () {
                    pagination.searchText=pagination.searchField.value;
                    resetDocList(pagination,false);
                }, 1000);
            }, false);
        }
        loadCount(pagination).then(data=>{
            pagination.count=data;
            pagination.onCount(pagination);
            pagination.loadList(pagination.label, 0).then(updatePagination(pagination.label,0));
        });
    }

</script>
