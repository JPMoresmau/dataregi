{% import "macros" as macros %}
<!DOCTYPE html>
<html>
    <head>
    <title>DataRegi</title>
    {% include "header" %}
    </head>
<body>

    {% include "page_header" %}
    
    <div class="hero fullscreen">
        <div class="hero-body u-center">
            <div class="w-90" style="position: relative" id="tableRoot">
                <div class="row">
                    <div class="col-12" style="padding: 2rem;">
                        <h1>Manage all the spreadsheets floating around your organization!</h1>
                    </div>
                </div>
                <div class="row">
                    <div class="col-3 offset-3 form-group">
                            <input type="file" id="uploadInput" placeholder="Choose a spreadsheet." multiple style="display:none;"/>
                            <button class="form-group-btn btn-link" id="fileSelect">Select some files</button>
                    </div>
                    <div class="col-3 form-group">
                            <button id="uploadButton" class="form-group-btn btn-link" disabled>Upload</button>
                    </div>
                </div>
                <div class="row">
                    <div class="col-6 offset-3">
                        Selected files: <span id="fileNum">0</span><br/>
                        Total size: <span id="fileSize">0</span>
                    </div>
                </div>
                <div class="row">
                    <div class="col-12">
                        {% include "toast" %}
                    </div>
                </div>
                <div class="row" id="docHeaderRow_doc_list">
                    <div class="col-6">
                       <h6 id="docCountHeader"></h6>
                    </div>
                    <div class="col-6">
                        <input type="search" placeholder="Search for documents" id="searchDocs_doc_list"/>
                     </div>
                </div>
                <div class="row">
                    <div class="col-12" >
                        {{ macros::pagination(label="doc_list") }}
                    </div>
                </div>
            </div>
        </div>
    </div>

    {% include "list" %}

    <script>

        function updateSize() {
            let nBytes = 0,
                oFiles = this.files,
                nFiles = oFiles.length;
            for (let nFileId = 0; nFileId < nFiles; nFileId++) {
              nBytes += oFiles[nFileId].size;
            }
            let sOutput = nBytes + " bytes";
            const aMultiples = ["KiB", "MiB", "GiB", "TiB", "PiB", "EiB", "ZiB", "YiB"];
            for (nMultiple = 0, nApprox = nBytes / 1024; nApprox > 1; nApprox /= 1024, nMultiple++) {
              sOutput = nApprox.toFixed(3) + " " + aMultiples[nMultiple];
            }
            document.getElementById("fileNum").innerHTML = nFiles;
            document.getElementById("fileSize").innerHTML = sOutput;
            document.getElementById("uploadButton").disabled = nBytes==0;
        }
        
        const uploadInput=document.getElementById("uploadInput");
        uploadInput.addEventListener("change", updateSize, false);
        const fileSelect = document.getElementById("fileSelect");
   
        fileSelect.addEventListener("click", function (e) {
            if (uploadInput) {
                uploadInput.click();
            }
        }, false);

        async function uploadFiles(){
            let data = new FormData();
            for (const file of uploadInput.files) {
              data.append('files',file,file.name);
            }
            const response = await fetch('/api/docs', {
                method: 'POST',
                body: data
            });
            response.json().then(data=>{
                let count = 0;
               
                for (du of data){
                    if ('Ok' in du){
                        count++;
                    } else if ('AlreadyExists' in du){
                        showWarningToast(du['AlreadyExists']['upload_name'] +" already existed with same data!");
                    }
                }
                if (count>0){
                    const msg=(count==1)?"1 document uploaded!":count+" documents uploaded!";
                    showToast(msg);
                }
               
                uploadInput.value=null;
                updateSize.call(uploadInput);
                resetDocList(newPagination());
            });
        }

        uploadButton.addEventListener("click", uploadFiles, false);

        function showDocCount(pagination){
            let txt="You have no documents yet";
            if (pagination.count==1){
                txt="You have only 1 document";
            } else if (pagination.count>1){
                txt="You have " +pagination.count.toString()+" documents (uniquely named)";
            }
            if (pagination.searchText && pagination.searchText.length>0){
                txt+=" matching your query";
            }
    
            document.getElementById('docCountHeader').textContent=txt;
        }

        resetDocList(newPagination());

        let deleted=document.cookie.split('; ').find(row => row.startsWith('deleted'));
        if (deleted){
            const doc_name=deleted.split('=')[1];
            if (doc_name){
                showToast(doc_name+" successfully deleted!");
                document.cookie="deleted=; expires=Thu, 01 Jan 1970 00:00:01 GMT;Secure";
            }
        }

        function newPagination(){
            let pagination = new Pagination('doc_list','/api/docs/count', {'owner':true,'distinct':true});
            pagination.onCount=showDocCount;
            return pagination;
        }
    </script>

</body>
</html>
